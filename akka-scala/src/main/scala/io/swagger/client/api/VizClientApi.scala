/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Event
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object VizClientApi {

  /**
   * Get a list of all games/datasets currently in the database. Retrieves a list of unique game instance IDs.   
   * 
   * Expected answers:
   *   code 200 :  (Array of strings representing game_instance_ID (s))
   */
  def gamesGet(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://virtserver.swaggerhub.com/JuroUhlar/kypo-backend/1.0.0", "/games", "application/json")
      .withSuccessResponse[Unit](200)
        /**
   * You can get a specific filtered dataset by setting query parameters equivalent to SQL conditions in the database. You can combine different conditions. 
   * 
   * Expected answers:
   *   code 200 : Seq[Event] (events results matching criteria)
   * 
   * @param gameInstanceID pass an optional search string to get events from a specific game (dataset), for example, &#39;st-polten&#39;
   * @param event pass an optional search string to get only events of a specific type, for example, &#39;Game started&#39;, &#39;Game finished&#39;, &#39;Correct flag submited&#39;, ...
   * @param level Limit results to events during a specific level 1 through 6
   * @param playerID Limit results to events of specific player by passing in his/her ID, for example, &#39;17158&#39;
   */
  def getEvents(gameInstanceID: Option[String] = None, event: Option[String] = None, level: Option[Int] = None, playerID: Option[Int] = None): ApiRequest[Seq[Event]] =
    ApiRequest[Seq[Event]](ApiMethods.GET, "https://virtserver.swaggerhub.com/JuroUhlar/kypo-backend/1.0.0", "/events", "application/json")
      .withQueryParam("game_instance_ID", gameInstanceID)
      .withQueryParam("event", event)
      .withQueryParam("level", level)
      .withQueryParam("player_ID", playerID)
      .withSuccessResponse[Seq[Event]](200)
      

}

