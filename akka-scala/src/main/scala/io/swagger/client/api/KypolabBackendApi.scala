/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Event
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object KypolabBackendApi {

  /**
   * Adds a new event tot the system
   * 
   * Expected answers:
   *   code 200 :  (Response body contains info whether the operation was successul or not. TODO meaningful response codes)
   * 
   * @param event Event to add
   */
  def addEvent(event: Option[Event] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/JuroUhlar/kypo-backend/1.0.0", "/event", "application/json")
      .withBody(event)
      .withSuccessResponse[Unit](200)
        /**
   * Adds a new array of events to the system
   * 
   * Expected answers:
   *   code 200 :  (Response body contains info whether the operation was successul or not. TODO meaningful response codes)
   * 
   * @param gameID If your events to not contain the game_instance_ID property, you can send them anyway, just specify their game_instance_id as a URL parameter. It will be automatically added to all events that don&#39;t have a defined game_instance_id. If your data already is in the correct format, the parameter is not necessary.
   * @param events Events to add
   */
  def addEventsBulk(gameID: String, events: Seq[Event]): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/JuroUhlar/kypo-backend/1.0.0", "/events-bulk/{gameID}", "application/json")
      .withBody(events)
      .withPathParam("gameID", gameID)
      .withSuccessResponse[Unit](200)
      

}

